<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClashOfClans</name>
    </assembly>
    <members>
        <member name="M:ClashOfClans.ClashOfClansClient.#ctor(System.String)">
            <summary>
            Constructor for ClashOfClansClient, creates a new <see cref="T:System.Net.Http.HttpClient" /> each time.
            </summary>
            <param name="apiToken">API token</param>
        </member>
        <member name="M:ClashOfClans.ClashOfClansClient.#ctor(System.String,System.Net.Http.IHttpClientFactory)">
            <summary>
            Constructor for ClashOfClansClient, uses <see cref="T:System.Net.Http.IHttpClientFactory" /> to create the HTTP client.
            </summary>
            <param name="apiToken"></param>
            <param name="httpClientFactory"></param>
        </member>
        <member name="P:ClashOfClans.ClashOfClansClient.Clans">
            <summary>
            Pertains to the "Clans" section of the API
            </summary>
        </member>
        <member name="P:ClashOfClans.ClashOfClansClient.Locations">
            <summary>
            Pertains to the "Locations" section of the API
            </summary>
        </member>
        <member name="P:ClashOfClans.ClashOfClansClient.Leagues">
            <summary>
            Pertains to the "Leagues" section of the API
            </summary>
        </member>
        <member name="P:ClashOfClans.ClashOfClansClient.Players">
            <summary>
            Pertains to the "Players" section of the API
            </summary>
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.SearchAsync(System.String,ClashOfClans.ClanSearchSettings)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetClanByTagAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetClanMembersAsync(System.String,ClashOfClans.BasicSearchSettings)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetWarLogsAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetCurrentWarAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetCurrentLeagueGroupAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.ClashClans.GetClanWarLeagueAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.SearchAsync(System.String,ClashOfClans.ClanSearchSettings)">
            <summary>
            Search all clans by name and/or filtering the results using various criteria. 
            <br />
            At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long.
            </summary>
            <param name="clanName">Clan name to search for</param>
            <param name="clanSearchSettings">Search criteria</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ArgumentException"><paramref name="clanName"/></exception>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetClanByTagAsync(System.String)">
            <summary>
            Get information about a single clan by clan tag.
            </summary>
            <param name="clanTag">Clan tag to search for</param>
            <returns><see cref="T:ClashOfClans.Core.Clans.ClanInformation"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetClanMembersAsync(System.String,ClashOfClans.BasicSearchSettings)">
            <summary>
            Returns a list of clan members based on the clan tag and search criteria.
            </summary>
            <param name="clanTag">Clan tag to search for</param>
            <param name="searchSettings">Basic search criteria</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetWarLogsAsync(System.String)">
            <summary>
            Retrieve a clan war log.
            </summary>
            <param name="clanTag">Clan tag to search for</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetCurrentWarAsync(System.String)">
            <summary>
            Gets the current war, returns null if the clan is not currently in war.
            </summary>
            <param name="clanTag">Clan tag to get current war for</param>
            <returns><see cref="T:ClashOfClans.Core.Clans.CurrentWar"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetCurrentLeagueGroupAsync(System.String)">
            <summary>
            Retrieve information about clan's current clan war league group.
            </summary>
            <param name="clanTag">Clan tag to get current league group for</param>
            <returns><see cref="T:ClashOfClans.Core.Clans.LeagueGroup"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Clans.Interfaces.IClashClans.GetClanWarLeagueAsync(System.String)">
            <summary>
            Retrieve information about a clan war league war.
            </summary>
            <param name="warTag">War tag to retrieve information from</param>
            <returns><see cref="T:ClashOfClans.Core.Clans.ClanWarLeague"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Leagues.ClashLeagues.GetLeaguesAsync">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Leagues.ClashLeagues.GetLeagueByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Leagues.ClashLeagues.GetLeagueSeasonsAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Leagues.ClashLeagues.GetLeagueSeasonRankingsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Leagues.Interfaces.IClashLeagues.GetLeaguesAsync">
            <summary>
            Gets a list of all leagues
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Leagues.Interfaces.IClashLeagues.GetLeagueByIdAsync(System.Int32)">
            <summary>
            Get league information from a league id
            </summary>
            <param name="leagueId">League id to get</param>
            <returns><see cref="T:ClashOfClans.Core.Leagues.League"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Leagues.Interfaces.IClashLeagues.GetLeagueSeasonsAsync(System.Int32)">
            <summary>
            Gets all league seasons, only available for "Legendary League"
            </summary>
            <param name="leagueId">League id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ClashOfClans.Core.Leagues.Interfaces.IClashLeagues.GetLeagueSeasonRankingsAsync(System.Int32,System.String)">
            <summary>
            Get league season rankings, only available for "Legendary League"
            </summary>
            <param name="leagueId">League id</param>
            <param name="seasonId">Season id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Locations.ClashLocations.GetLocationsAsync">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Locations.ClashLocations.GetLocationByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Locations.Interfaces.IClashLocations.GetLocationsAsync">
            <summary>
            Gets all available locations.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Locations.Interfaces.IClashLocations.GetLocationByIdAsync(System.Int32)">
            <summary>
            Get a location by its ID
            </summary>
            <param name="id">Location id to get</param>
            <returns><see cref="T:ClashOfClans.Core.Locations.Location"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Players.ClashPlayers.GetPlayerByTagAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Players.ClashPlayers.VerifyApiToken(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ClashOfClans.Core.Players.Interfaces.IClashPlayers.GetPlayerByTagAsync(System.String)">
            <summary>
            Gets a player based off the given tag
            </summary>
            <param name="playerTag">Player tag</param>
            <returns><see cref="T:ClashOfClans.Core.Players.ClashPlayer"/></returns>
        </member>
        <member name="M:ClashOfClans.Core.Players.Interfaces.IClashPlayers.VerifyApiToken(System.String,System.String)">
            <summary>
            Verify player API token that can be found from the game settings
            </summary>
            <param name="playerTag">Player tag</param>
            <param name="apiToken">API token</param>
            <returns><see langword="true" /> if token is valid, else <see langword="false" /></returns>
        </member>
    </members>
</doc>
